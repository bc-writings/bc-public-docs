===================
CS UNPLUGGED - TODO
===================


VERSION = MAJOR.MINOR.PATCH


# mogrify -trim *.png
# mogrify -mattecolor white -frame 10x10 *.png
# mogrify -bordercolor none -border 10 *.png


> ----------------- <

exemple arbre dans annnexe : mettre une colonne à gauche avec toutes les ocnigurations possibles


> ----------------- <

DOC::
    arbre coût minimal : étudier via un code le comprtement des listes voir si on peut en déduire une méthode simple à expliqure (mais peut-être dur à faire mais on s'ne fiche)


> ----------------- <

CODE::
    Solution optimale ??????
        ----> ne se déplacer que là il y a du nouveau à faire !!!
        ----> bien entendu s'autoirse rà tourner (déplacement modulo la longuer de la liste)
        ---->   RÉSUMÉ : choisir le mouvement qui va faire diminuer le nombre associé et si pas possivble directement aller à la position la plus proche permettant de faire diminuer le nombre

        OU

        ---> minimiser liste
        ---> si u-impossible, bouger le pion que l'on peut rapprocher le plus
        ---> le coder et cimparer avec nbre de coût uen sol optimale


> ----------------- <

ajout d'une page à découper au format circulaire at aussi carré arrondi (car plus simple à découper que des disques)

faire une version pour daltonien avec motif

faire auussi une version numérique (codage maison)


> ----------------- <

THÉORIE avant optimalité - tests concrets ::
    pour 5 bases, comparer nombre de coups des alogs présenté (faisable car ebviron 65000 vconfigurations)
    config construite via la liste L(Config) défini pour la méthode "on avance au mieux"

    pour tests, on ajoute des méthodes bis améliorés ou non ? mais non prouvées
        ---> sélection mais en se déplacçant où l'on veut mais au plus prêt possible au moment où l'on choisir
        ---> bubble : barrière mouvante = dès qu'une ou plusieurs bases voisins se remplissent, elles définissent un nouveau mur
        ---> marche aléatoie inetelligente qui ne touche pas aux jeton bien placés sauf si deux jetson bien placés : indiquer qu'ici c'est un programme et non un algorithme !!!


> ----------------- <

CODE::
    revoir la couleur noir , ajouter du alpha pour obtenir un truc bien diéférentiable entre belu foncé et noir !!!!

    version noir et blanc numéroté via
        ---> J1 pour joueur ou jeton 1
        ---> B1 pour base 1


> ----------------- <

CODE::
    version GUI via PyQT pour pratiquer !!!


> ----------------- <

CODE::
    MOVIE::
    # http://robotics.usc.edu/~ampereir/wordpress/?p=702
    #
    # cat *.png | ffmpeg -f image2pipe  -framerate 1/2  -i - output.mp4
    #
    #
    # ffmpeg -framerate 1/5 -i %03d.png -c:v libx264 -vf fps=25 -pix_fmt yuv420p out.mp4


> ----------------- <

versions cli puis gui !!!!


> ----------------- <

Maldresse - Sélection ???

1 0 - 1 4 - 3 3 - 4 2 - X 2
1 0 - 1 4 - 3 3 - 4 X - 2 2
1 0 - 1 4 - X 3 - 4 3 - 2 2   <--- On devrait s'arrêter ici !
1 0 - X 4 - 1 3 - 4 3 - 2 2



[0.X]  [2.1]  [1.2]
[0.1]  [2.X]  [1.2]
[0.1]  [2.1]  [X.2]
[0.1]  [X.1]  [2.2]
[X.1]  [0.1]  [2.2]    <--- maladroit
[0.1]  [X.1]  [2.2]    <--- maladroit
[0.X]  [1.1]  [2.2]
