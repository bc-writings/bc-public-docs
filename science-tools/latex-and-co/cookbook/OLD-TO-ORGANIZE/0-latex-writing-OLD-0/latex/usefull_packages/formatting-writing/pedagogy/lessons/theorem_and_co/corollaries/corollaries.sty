\ProvidesPackage{corollaries}[2010/12/28 version 1]

% Package under the LaTeX Project Public License:
%   http://www.latex-project.org/lppl/

\newcommand{\newcorollary}{\@ifstar\newcorollary@star
                                   \newcorollary@nostar}
\def\newcorollary@star#1#2{\newtheorem*{#1}{#2}}
\def\newcorollary@nostar#1{%
  \DeclareCorollaryCounter{#1}%
  \@ifnextchar[{\newcorollary@nostar@opt{#1}}%
               {\newcorollary@nostar@nopt{#1}}}
\def\newcorollary@nostar@opt#1[#2]#3{%
  \newtheorem{#1}[#2]{#3}%
}
\def\newcorollary@nostar@nopt#1#2{%
  \@ifnextchar[{\newcorollary@nostar@nopt@opt{#1}{#2}}%
               {\newcorollary@nostar@nopt@nopt{#1}{#2}}}
\def\newcorollary@nostar@nopt@opt#1#2[#3]{%
  \newtheorem{#1}{#2}%
  \@for\corollaries@mastertheorem:=#3\do{%
    \corollaries@handle@master@counter{#1}{\corollaries@mastertheorem}%
  }%
}
\def\newcorollary@nostar@nopt@nopt#1#2{%
  \newtheorem{#1}{#2}%
}
\def\corollaries@handle@master@counter#1#2{%
  \@addtoreset{#1}{#2}%
  \AddToCorollaryReset{#1}{#2}%
}%

\newcommand{\DeclareCorollaryCounter}[1]{}% to check if command exists
\DeclareRobustCommand{\DeclareCorollaryCounter}[1]{%
  \newcounter{corollaries@unique@ID@#1}%
}

\def\corollaries@addto@cl#1#2#3{%
  \edef\corollaries@temp{#3}%
  \@ifundefined{corollaries@#1@cl@#2}%
    {\expandafter\gdef\csname corollaries@#1@cl@#2\endcsname{}}%
    {}%
  \expandafter\gdef\csname
    corollaries@#1@cl@#2\expandafter\expandafter\expandafter
  \endcsname\expandafter\expandafter\expandafter{%
    \csname corollaries@#1@cl@#2\expandafter\endcsname\csname corollaries@#1@elt\expandafter\endcsname\expandafter{\corollaries@temp}%
  }
}
\def\corollaries@addto@m@cl#1#2{\corollaries@addto@cl{m}{#1}{#2}}
\def\corollaries@addto@s@cl#1#2{\corollaries@addto@cl{s}{#1}{#2}}
\newcommand{\AddToCorollaryReset}[2]{}% to check if command exists
\DeclareRobustCommand{\AddToCorollaryReset}[2]{%
  \corollaries@addto@m@cl{#1}{#2}%
  \@for\corollaries@counter@name:=#2\do{%
    \expandafter\corollaries@addto@s@cl\expandafter{%
      \corollaries@counter@name}{#1}%
  }
}

\let\@latex@kernel@refstepcounter\refstepcounter

\def\refstepcounter#1{%
  \@latex@kernel@refstepcounter{#1}%
  % Loop over the slave counters
  \def\corollaries@s@elt##1{%
  % #1  = master counter (e.g. theorem or proposition)
  % ##1 = slave  counter (e.g. corollary)
    \addtocounter{corollaries@unique@ID@##1}{1}%
  }
  \@ifundefined{corollaries@s@cl@#1}
    {}
    {\csname corollaries@s@cl@#1\endcsname}
  \let\corollaries@s@elt\undefined
  % this time, we only test whether there is a master counter (no loop)
  \@ifundefined{corollaries@m@cl@#1}
    {}
    {\expandafter\ifx\csname corollaries%
                             @\roman{corollaries@unique@ID@#1}%
                             @nb@#1\endcsname\relax
          \expandafter\gdef\csname corollaries%
                             @\roman{corollaries@unique@ID@#1}%
                             @nb@#1\endcsname{0}%
     \else
       \expandafter\xdef\csname corollaries%
           @\roman{corollaries@unique@ID@#1}%
           @nb@#1\endcsname
          {\number\numexpr\csname
                          corollaries%
                          @\roman{corollaries@unique@ID@#1}%
                          @nb@#1\endcsname+1\relax}%
     \fi
     \immediate\write\@auxout{%
        \expandafter\gdef\string
           \auxcorollaries @\roman{corollaries@unique@ID@#1}%
                           @nb@#1{\csname corollaries%
                                    @\roman{corollaries@unique@ID@#1}%
                                    @nb@#1\endcsname}%
     }%
     \@ifundefined{auxcorollaries%
                   @\roman{corollaries@unique@ID@#1}%
                   @nb%
                   @#1}{}{%
     \expandafter\ifnum\csname auxcorollaries%
                   @\roman{corollaries@unique@ID@#1}%
                   @nb%
                   @#1\endcsname=0
       \expandafter\renewcommand\csname the#1\endcsname{\unskip}%
     \else
       %
     \fi
     }%
    }%
}

\endinput
