%%%
% Le \pack ''ifthen'' nous permet de facilement faire des tests du type
% ''SI-SINON-SI'' via une syntaxe naturelle (au moins pour un codeur).
%%%
\usepackage{ifthen}

%%%
% \tikz permet de facilement tracer un triangle de Pascal "binaire".
%%%
\usepackage{tikz}

%%%
% Le travail de calcul modulo `2` est fait par la fonction ''binCnp''
% présente dans le fichier ''main.lua''.
%%%
\directlua{dofile('main.lua')}

%%%
% prototype::
%     #1 : le "naturel" n pour le nombre de combinaisons de p parmi n.
%     #2 : le "naturel" p pour le nombre de combinaisons de p parmi n.
%%%
\NewDocumentCommand{ \binCnp }{m m}{%
  \directlua{tex.sprint(binCnp(#1, #2))}%
}

%%%
% Nous créons un style \tikz paramétré par une \coul.
%%%
\tikzset{
  cnp/.style n args={1}{
    draw,
    rectangle,
    minimum size = 2.3em,
    color        = #1!70!black, % Juste du design visuel subjectif avec
    fill         = #1!70!black, % 70% de la couleur ''#1'' et 30% de noir.
  }
}


%%%
% prototype::
%     #1 : option pour la couleur des impairs.
%     #2 : option pour la couleur des pairs.
%     #3 : le nombre de lignes souhaitées.
%%%
\NewDocumentCommand{ \discretsierpinsky }{ O{red} D<>{blue} m }{%
  \begin{tikzpicture}[scale = 0.8]
    \foreach \n in {0,...,#3} {
      \pgfmathsetmacro\pshift{0.5 * \n}

      \foreach \p in {0,...,\n} {
        \ifthenelse{\binCnp{\n}{\p} = 1}{
          \colorlet{col}{#1}
        }{
          \colorlet{col}{#2}
        }

        \draw (\p - \pshift, 6 - \n) node[cnp = col] {};
      }
    }
  \end{tikzpicture}
}
